events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;
    
    # 全局文件上传配置
    client_max_body_size 50m;
    client_body_buffer_size 128k;
    client_body_timeout 300s;
    client_header_timeout 300s;
    client_body_temp_path /var/cache/nginx/client_body_temp;
    
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  /var/log/nginx/access.log main;
    error_log   /var/log/nginx/error.log;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    
    # Gzip压缩
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain text/css text/xml text/javascript
        application/json application/javascript application/xml+rss
        application/atom+xml image/svg+xml;
        
    upstream backend {
        server backend:8080;
    }
    
    server {
        listen 80;
        server_name localhost;
        
        # 服务器级别的文件大小限制
        client_max_body_size 50m;
        client_body_buffer_size 128k;
        
        # 前端静态文件目录
        root /usr/share/nginx/html;
        index index.html;
        
        # 默认前端路由
        location / {
            client_max_body_size 50m;
            try_files $uri $uri/ /index.html;
        }
        
        # API请求代理到后端
        location /api/ {
            proxy_pass http://backend/api/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            
            # 文件上传相关配置
            client_max_body_size 50m;
            client_body_buffer_size 128k;
            client_body_timeout 300s;
            
            # 代理缓冲区配置
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
            
            # 超时时间
            proxy_read_timeout 300s;
            proxy_send_timeout 300s;
            proxy_connect_timeout 300s;
            
            # 请求体传递配置
            proxy_request_buffering off;
        }
        
        # WebSocket代理
        location /ws {
            proxy_pass http://backend/ws;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # 文件访问代理到后端
        location /files/ {
            proxy_pass http://backend/files/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # 添加认证头传递
            proxy_set_header Authorization $http_authorization;
            proxy_pass_header Authorization;
            
            # 文件下载也需要大文件支持
            client_max_body_size 50m;
        }
        
        # 静态资源缓存（仅前端资源）
        location ~* \.(js|css|ico|svg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
        }
        
        # 安全头
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; object-src 'none'; frame-ancestors 'self'; form-action 'self'; base-uri 'self'; connect-src 'self' ws://localhost;" always;
    }
}
